<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Memory Matching Game</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <h1>Memory Matching Game</h1>
  <div class="game-board" id="gameBoard"></div>
  <script src="script.js"></script>
</body>
</html>
---------------------------------------------------------------------------
body {
  font-family: Arial, sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: #f0f0f0;
  margin: 0;
}

h1 {
  margin-bottom: 20px;
}

.game-board {
  display: grid;
  grid-template-columns: repeat(4, 100px);
  grid-gap: 10px;
}

.card {
  width: 100px;
  height: 100px;
  background-color: #1e90ff;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2em;
  color: white;
  cursor: pointer;
  border-radius: 10px;
}

.card.flip {
  background-color: #fff;
  color: #1e90ff;
  pointer-events: none;
}

.card.match {
  background-color: #32cd32;
  color: white;
  pointer-events: none;
}
-----------------------------------------------------------------------
const gameBoard = document.getElementById('gameBoard');
const cardsArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
let cards = [...cardsArray, ...cardsArray]; // Duplicate the array for pairs
let firstCard, secondCard;
let hasFlippedCard = false;
let lockBoard = false;

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

function createBoard() {
  shuffle(cards);
  cards.forEach(card => {
    const cardElement = document.createElement('div');
    cardElement.classList.add('card');
    cardElement.dataset.card = card;
    cardElement.innerHTML = `<span>${card}</span>`;
    cardElement.addEventListener('click', flipCard);
    gameBoard.appendChild(cardElement);
  });
}

function flipCard() {
  if (lockBoard) return;
  if (this === firstCard) return;

  this.classList.add('flip');

  if (!hasFlippedCard) {
    hasFlippedCard = true;
    firstCard = this;
    return;
  }

  secondCard = this;
  checkForMatch();
}

function checkForMatch() {
  let isMatch = firstCard.dataset.card === secondCard.dataset.card;
  isMatch ? disableCards() : unflipCards();
}

function disableCards() {
  firstCard.classList.add('match');
  secondCard.classList.add('match');
  resetBoard();
}

function unflipCards() {
  lockBoard = true;
  setTimeout(() => {
    firstCard.classList.remove('flip');
    secondCard.classList.remove('flip');
    resetBoard();
  }, 1000);
}

function resetBoard() {
  [hasFlippedCard, lockBoard] = [false, false];
  [firstCard, secondCard] = [null, null];
}

createBoard();
